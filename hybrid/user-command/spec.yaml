---
host: "lightapi.net"
service: "user"
schemas:
  createUserRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "user host indicator the organization for user"
      email:
        type: "string"
        description: "user email address"
      entityId:
        type: "string"
        description: "a unique entity id for user type"
      userType:
        title: "User Type"
        type: "string"
      referralId:
        type: "string"
        title: "Referral Id or Email"
      managerId:
        type: "string"
        title: "Manager Id or Email"
      language:
        type: "string"
        description: "preferred language of user"
        enum:
        - "en"
      password:
        type: "string"
        description: "raw password of user"
      passwordConfirm:
        type: "string"
        description: "password confirm of user"
      firstName:
        type: "string"
        description: "firstName of the user"
      lastName:
        type: "string"
        description: "firstName of the user"
      phoneNumber:
        type: "string"
        title: "Phone Number"
      gender:
        type: "string"
        description: "user gender type"
      birthday:
        type: "string"
        format: "date"
        description: "birthday of the user"
      country:
        type: "string"
        description: "country name"
      province:
        type: "string"
        description: "province or state name"
      city:
        type: "string"
        description: "city name"
      postCode:
        type: "string"
        description: "postCode or zipCode"
      address:
        type: "string"
        description: "address"
    required:
    - "hostId"
    - "email"
    - "entityId"
    - "userType"
    - "language"
    - "password"
    - "passwordConfirm"
  onboardUserRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "user host indicator the organization for user"
      email:
        type: "string"
        description: "user email address"
      entityId:
        type: "string"
        description: "a unique entity id for user type"
      userType:
        title: "User Type"
        type: "string"
      referralId:
        type: "string"
        title: "Referral Id or Email"
      managerId:
        type: "string"
        title: "Manager Id or Email"
      language:
        type: "string"
        description: "preferred language of user"
        enum:
          - "en"
      firstName:
        type: "string"
        description: "firstName of the user"
      lastName:
        type: "string"
        description: "firstName of the user"
      phoneNumber:
        type: "string"
        title: "Phone Number"
      gender:
        type: "string"
        description: "user gender type"
      birthday:
        type: "string"
        format: "date"
        description: "birthday of the user"
      country:
        type: "string"
        description: "country name"
      province:
        type: "string"
        description: "province or state name"
      city:
        type: "string"
        description: "city name"
      postCode:
        type: "string"
        description: "postCode or zipCode"
      address:
        type: "string"
        description: "address"
    required:
    - "hostId"
    - "email"
    - "entityId"
    - "userType"
    - "language"
  createSocialUserRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "user host indicator the organization for user"
      email:
        type: "string"
        description: "user email address"
      userId:
        type: "string"
        description: "a unique user id"
      userType:
        title: "User Type"
        type: "string"
      language:
        type: "string"
        description: "preferred language of user"
      firstName:
        type: "string"
        description: "firstName of the user"
      lastName:
        type: "string"
        description: "firstName of the user"
    required:
    - "hostId"
    - "email"
    - "userId"
    - "userType"
    - "language"
  deleteUserByIdRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
      userId:
        type: "string"
    required:
    - "hostId"
    - "userId"
  updateUserByIdRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "user host indicator the organization for user"
      email:
        type: "string"
        description: "email address of the user"
      userId:
        type: "string"
        description: "a unique user id"
      entityId:
        type: "string"
        title: "Entity Id"
      userType:
        type: "string"
        title: "User Type"
      referralId:
        type: "string"
        title: "Referral Id or Email"
      managerId:
        type: "string"
        title: "Manager Id or Email"
      language:
        type: "string"
        description: "preferred language of user"
        enum:
        - "en"
      firstName:
        type: "string"
        description: "firstName of the user"
      lastName:
        type: "string"
        description: "firstName of the user"
      phoneNumber:
        type: "string"
        title: "Phone Number"
      gender:
        type: "string"
        description: "user gender type"
      birthday:
        type: "string"
        format: "date"
        description: "birthday of the user"
      country:
        type: "string"
        description: "country name"
      province:
        type: "string"
        description: "province or state name"
      city:
        type: "string"
        description: "city name"
      postCode:
        type: "string"
        description: "postCode or zipCode"
      address:
        type: "string"
        description: "address"
    required:
    - "hostId"
    - "email"
    - "userId"
    - "entityId"
    - "userType"
    - "language"
  changePasswordRequest:
    title: "Service"
    type: "object"
    properties:
      oldPassword:
        type: "string"
        description: "the old password"
      newPassword:
        type: "string"
        description: "the new password"
      passwordConfirm:
        type: "string"
        description: "password confirm of user"
    required:
    - "oldPassword"
    - "newPassword"
    - "passwordConfirm"
  forgetPasswordRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "email address of the user"
    required:
    - "email"
  resetPasswordRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "email address of the user"
      token:
        type: "string"
        description: "password reset token received from email"
      newPassword:
        type: "string"
        description: "the new password"
      passwordConfirm:
        type: "string"
        description: "password confirm of user"
    required:
    - "email"
    - "token"
    - "newPassword"
    - "passwordConfirm"
  confirmUserRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
      token:
        type: "string"
    required:
    - "email"
    - "token"
  verifyUserRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "Host Id"
      userId:
        type: "string"
        description: "User Id"
    required:
    - "hostId"
    - "userId"
  lockUserRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
      reason:
        type: "string"
    required:
    - "email"
    - "reason"
  unlockUserRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
      reason:
        type: "string"
    required:
    - "email"
    - "reason"
  sendMessageRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
      subject:
        type: "string"
      content:
        type: "string"
    required:
    - "userId"
    - "subject"
    - "content"
  updatePaymentRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant user email address"
      payments:
        type: "array"
        description: "A list of payments"
    required:
    - "payments"
  deletePaymentRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant user email address"
    required:
    - "email"
  paymentNonceRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "merchant userId"
      nonce:
        type: "string"
        description: "Payment method nonce"
    required:
    - "userId"
    - "nonce"
  createOrderRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "merchant userId"
      order:
        type: "object"
        description: "Order object"
    required:
    - "userId"
    - "order"
  cancelOrderRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Customer email"
      merchantUserId:
        type: "string"
        description: "Merchant User Id"
      orderId:
        type: "object"
        description: "Order Id"
    required:
    - "email"
    - "orderId"
  deliverOrderRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant email"
      customerUserId:
        type: "string"
        description: "Customer User Id"
      orderId:
        type: "string"
        description: "Order Id"
    required:
    - "email"
    - "customerUserId"
    - "orderId"
  exportPortalEventRequest:
    title: "Export"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "Host Id"
      portalServices:
        type: "string"
        description: "Portal services"
      startTs:
        type: "string"
        description: "Start timestamp"
      endTs:
        type: "string"
        description: "End timestamp"
    required:
    - "hostId"
    - "portalServices"
  importPortalEventRequest:
    title: "Import"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "Host Id"
      portalServices:
        type: "string"
        description: "Portal services"
      startTs:
        type: "string"
        description: "Start timestamp"
      endTs:
        type: "string"
        description: "End timestamp"
      eventText:
        title: "Event Text"
        description: "Event text to be imported"
        type: "string"
        minLength: 1
      eventUrl:
        title: "Event URL"
        description: "Event URL to be imported"
        type: "string"
        minLength: 1
    required:
    - "hostId"
    - "portalServices"
    oneOf:
    - required:
      - "eventText"
    - required:
      - "eventUrl"
action:
- name: "createUser"
  version: "0.1.0"
  handler: "CreateUser"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/createUserRequest"
    example:
      hostId: "host123"
      email: "test@example.com"
      entityId: "cust123"
      userType: "C"
      language: "en"
      password: "password"
      passwordConfirm: "password"
      firstName: "John"
      lastName: "Doe"
      phoneNumber: "123-456-7890"
      gender: "M"
      birthday: "1980-01-01"
      country: "US"
      province: "CA"
      city: "Los Angeles"
      postCode: "12345"
      address: "123 Main St"
- name: "onboardUser"
  version: "0.1.0"
  handler: "OnboardUser"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/onboardUserRequest"
    example:
      hostId: "host123"
      email: "test@example.com"
      entityId: "cust123"
      userType: "C"
      language: "en"
      firstName: "John"
      lastName: "Doe"
      phoneNumber: "123-456-7890"
      gender: "M"
      birthday: "1980-01-01"
      country: "US"
      province: "CA"
      city: "Los Angeles"
      postCode: "12345"
      address: "123 Main St"
- name: "createSocialUser"
  version: "0.1.0"
  handler: "CreateSocialUser"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/createSocialUserRequest"
    example:
      hostId: "host123"
      email: "test@example.com"
      userId: "socialuser123"
      userType: "C"
      language: "en"
      firstName: "Jane"
      lastName: "Doe"
- name: "deleteUserById"
  version: "0.1.0"
  handler: "DeleteUserById"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/deleteUserByIdRequest"
    example:
      hostId: "host123"
      userId: "user123"
- name: "updateUserById"
  version: "0.1.0"
  handler: "UpdateUserById"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/updateUserByIdRequest"
    example:
      hostId: "host123"
      email: "test@example.com"
      userId: "user123"
      entityId: "cust123"
      userType: "E"
      language: "en"
      firstName: "Updated First"
      lastName: "Updated Last"
      phoneNumber: "555-1234"
      gender: "F"
      birthday: "1990-02-02"
      country: "CA"
      province: "ON"
      city: "Toronto"
      postCode: "54321"
      address: "345 Fake St"
- name: "changePassword"
  version: "0.1.0"
  handler: "ChangePassword"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/changePasswordRequest"
    example:
      oldPassword: "oldpassword"
      newPassword: "newpassword"
      passwordConfirm: "newpassword"
- name: "forgetPassword"
  version: "0.1.0"
  handler: "ForgetPassword"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/forgetPasswordRequest"
    example:
      email: "test@example.com"
- name: "resetPassword"
  version: "0.1.0"
  handler: "ResetPassword"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/resetPasswordRequest"
    example:
      email: "test@example.com"
      token: "reset_token"
      newPassword: "newpassword"
      passwordConfirm: "newpassword"
- name: "confirmUser"
  version: "0.1.0"
  handler: "ConfirmUser"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/confirmUserRequest"
    example:
      email: "test@example.com"
      token: "confirm_token"
- name: "verifyUser"
  version: "0.1.0"
  handler: "VerifyUser"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/verifyUserRequest"
    example:
      hostId: "host123"
      userId: "user123"
- name: "lockUser"
  version: "0.1.0"
  handler: "LockUser"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/lockUserRequest"
    example:
      email: "test@example.com"
      reason: "suspicious activity"
- name: "unlockUser"
  version: "0.1.0"
  handler: "UnlockUser"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/unlockUserRequest"
    example:
      email: "test@example.com"
      reason: "resolved"
- name: "sendMessage"
  version: "0.1.0"
  handler: "SendMessage"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/sendMessageRequest"
    example:
      userId: "user123"
      subject: "Welcome Message"
      content: "Hi there, welcome to our platform"
- name: "updatePayment"
  version: "0.1.0"
  handler: "UpdatePayment"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/updatePaymentRequest"
    example:
      email: "test@example.com"
      payments:
      - card_number: "1234-5678-9012-3456"
        expiry_month: "12"
        expiry_year: "2025"
        cvv: "123"
- name: "deletePayment"
  version: "0.1.0"
  handler: "DeletePayment"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/deletePaymentRequest"
    example:
      email: "test@example.com"
- name: "paymentNonce"
  version: "0.1.0"
  handler: "PaymentNonce"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/paymentNonceRequest"
    example:
      userId: "user123"
      nonce: "payment_method_nonce"
- name: "createOrder"
  version: "0.1.0"
  handler: "CreateOrder"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/createOrderRequest"
    example:
      userId: "user123"
      order:
        items:
        - id: "item123"
          qty: 2
        total: 100
- name: "cancelOrder"
  version: "0.1.0"
  handler: "CancelOrder"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/cancelOrderRequest"
    example:
      email: "test@example.com"
      merchantUserId: "merchant123"
      orderId: "order123"
- name: "deliverOrder"
  version: "0.1.0"
  handler: "DeliverOrder"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/deliverOrderRequest"
    example:
      email: "test@example.com"
      customerUserId: "cust123"
      orderId: "order123"
- name: "exportPortalEvent"
  version: "0.1.0"
  handler: "ExportPortalEvent"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/exportPortalEventRequest"
    example:
      hostId: "host123"
      portalServices: "service1,service2"
- name: "importPortalEvent"
  version: "0.1.0"
  handler: "ImportPortalEvent"
  scope: "portal.w"
  request:
    schema:
      $ref: "#/schemas/importPortalEventRequest"
    example:
      hostId: "host123"
      portalServices: "service1,service2"
