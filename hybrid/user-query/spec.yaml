---
host: "lightapi.net"
service: "user"
schemas:
  queryUserByEmailRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "user email address"
    required:
    - "email"
  queryUserByIdRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "A unique user id"
    required:
    - "userId"
  queryUserByTypeEntityIdRequest:
    title: "Service"
    type: "object"
    properties:
      userType:
        type: "string"
        description: "User Type"
      entityId:
        type: "string"
        description: "A unique user id for the type"
    required:
    - "userType"
    - "entityId"
  getNonceByUserIdRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "User Id"
    required:
    - "userId"
  getUserLabelRequest:
    title: "User Label"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "Host Id"
    required:
    - "hostId"
  queryUserByWalletRequest:
    title: "Service"
    type: "object"
    properties:
      taijiWallet:
        type: "string"
        description: "user taiji wallet address"
    required:
    - "taijiWallet"
  loginUserRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
    - "email"
    - "password"
  getPrivateMessageRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
    required:
    - "email"
  getNotificationRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
      userId:
        type: "string"
    required:
    - "hostId"
    - "userId"
  listUserByHostIdRequest:
    title: "Service"
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "user hostId"
      offset:
        type: "integer"
        description: "Record Offset"
      limit:
        type: "integer"
        description: "Record Limit"
      email:
        type: "string"
        description: "Email"
      language:
        type: "string"
        description: "Language"
      userType:
        type: "string"
        description: "User Type"
      entityId:
        type: "string"
        description: "Entity Id"
      referralId:
        type: "string"
        description: "Referral Id"
      managerId:
        type: "string"
        description: "Manager Id"
      firstName:
        type: "string"
        description: "First Name"
      lastName:
        type: "string"
        description: "Last Name"
      phoneNumber:
        type: "string"
        description: "Phone Number"
      gender:
        type: "string"
        description: "Gender"
      birthday:
        type: "string"
        description: "Birthday"
      country:
        type: "string"
        description: "Country"
      province:
        type: "string"
        description: "Province"
      city:
        type: "string"
        description: "City"
      address:
        type: "string"
        description: "Address"
      postCode:
        type: "string"
        description: "Post Code"
      verified:
        type: "boolean"
        description: "Verified"
      locked:
        type: "boolean"
        description: "Locked"
    required:
    - "hostId"
    - "offset"
    - "limit"
  getPaymentRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant user email address"
    required:
    - "email"
  getPaymentByIdRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "A unique user id"
    required:
    - "userId"
  getClientTokenRequest:
    title: "Service"
    type: "object"
    properties:
      userId:
        type: "string"
        description: "Merchant userId"
      merchantId:
        type: "string"
        description: "Merchant Id"
    required:
    - "userId"
    - "merchantId"
  getCustomerOrderRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Customer Email"
      offset:
        type: "integer"
        description: "Record Offset"
      limit:
        type: "integer"
        description: "Record Limit"
    required:
    - "email"
    - "offset"
    - "limit"
  getMerchantOrderRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant Email"
      status:
        type: "string"
        description: "Order Status"
      offset:
        type: "integer"
        description: "Record Offset"
      limit:
        type: "integer"
        description: "Record Limit"
    required:
    - "email"
    - "status"
    - "offset"
    - "limit"
  getReferenceRequest:
    title: "Service"
    type: "object"
    properties:
      name:
        type: "string"
        description: "Table name"
      lang:
        type: "string"
        description: "Label language"
      rela:
        type: "string"
        description: "Relationship name"
      from:
        type: "string"
        description: "From value in rela"
    required:
    - "name"
  getRolesByEmailRequest:
    title: "Service"
    type: "object"
    properties:
      email:
        type: "string"
        description: "Merchant Email"
    required:
    - "email"
action:
- name: "queryUserByEmail"
  version: "0.1.0"
  handler: "QueryUserByEmail"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/queryUserByEmailRequest"
    example:
      email: "test@example.com"
- name: "queryUserById"
  version: "0.1.0"
  handler: "QueryUserById"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/queryUserByIdRequest"
    example:
      userId: "user123"
- name: "queryUserByTypeEntityId"
  version: "0.1.0"
  handler: "QueryUserByTypeEntityId"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/queryUserByTypeEntityIdRequest"
    example:
      userType: "C"
      entityId: "cust123"
- name: "getNonceByUserId"
  version: "0.1.0"
  handler: "GetNonceByUserId"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/getNonceByUserIdRequest"
    example:
      userId: "user123"
- name: "getUserLabel"
  version: "0.1.0"
  handler: "GetUserLabel"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/getUserLabelRequest"
    example:
      hostId: "host123"
- name: "queryUserByWallet"
  version: "0.1.0"
  handler: "QueryUserByWallet"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/queryUserByWalletRequest"
    example:
      taijiWallet: "0x1234567890abcdef"
- name: "loginUser"
  version: "0.1.0"
  handler: "LoginUser"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/loginUserRequest"
    example:
      email: "test@example.com"
      password: "password123"
- name: "getPrivateMessage"
  version: "0.1.0"
  handler: "GetPrivateMessage"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getPrivateMessageRequest"
    example:
      email: "test@example.com"
- name: "getNotification"
  version: "0.1.0"
  handler: "GetNotification"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getNotificationRequest"
    example:
      email: "test@example.com"
- name: "listUserByHostId"
  version: "0.1.0"
  handler: "ListUserByHostId"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/listUserByHostIdRequest"
    example:
      hostId: "host123"
      offset: 0
      limit: 10
- name: "getPayment"
  version: "0.1.0"
  handler: "GetPayment"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getPaymentRequest"
    example:
      email: "test@example.com"
- name: "getPaymentById"
  version: "0.1.0"
  handler: "GetPaymentById"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getPaymentByIdRequest"
    example:
      userId: "user123"
- name: "getClientToken"
  version: "0.1.0"
  handler: "GetClientToken"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getClientTokenRequest"
    example:
      userId: "user123"
      merchantId: "merchant123"
- name: "getCustomerOrder"
  version: "0.1.0"
  handler: "GetCustomerOrder"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getCustomerOrderRequest"
    example:
      email: "test@example.com"
      offset: 0
      limit: 10
- name: "getMerchantOrder"
  version: "0.1.0"
  handler: "GetMerchantOrder"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getMerchantOrderRequest"
    example:
      email: "test@example.com"
      status: "pending"
      offset: 0
      limit: 10
- name: "getReference"
  version: "0.1.0"
  handler: "GetReference"
  skipAuth: true
  request:
    schema:
      $ref: "#/schemas/getReferenceRequest"
    example:
      name: "countries"
      lang: "en"
      rela: "region"
      from: "US"
- name: "getRolesByEmail"
  version: "0.1.0"
  handler: "GetRolesByEmail"
  scope: "portal.r"
  request:
    schema:
      $ref: "#/schemas/getRolesByEmailRequest"
    example:
      email: "test@example.com"
